import { PROMPTS } from "@/utils/prompt";

// Replace with your actual Gemini API endpoint and key
const GEMINI_API_URL = process.env.GEMINI_API_URL || "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

/**
 * Summarizes the given text using Gemini API and the provided prompt.
 * @param {string} rawText - The text to summarize
 * @returns {Promise<string>} - The summary generated by Gemini
 */
export async function summarizeWithGemini(rawText: string): Promise<string> {
  if (!GEMINI_API_KEY) throw new Error("Gemini API key is not set");
  const prompt = `${PROMPTS.API_DEVELOPMENT}\n\nSummarize the following document:\n\n${rawText}`;
  try {
    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        contents: [{ parts: [{ text: prompt }] }],
      }),
    });
    if (!response.ok) throw new Error(`Gemini API error: ${response.statusText}`);
    const data = await response.json();
    // Gemini returns the summary in data.candidates[0].content.parts[0].text
    return (
      data?.candidates?.[0]?.content?.parts?.[0]?.text || "No summary generated."
    );
  } catch (err) {
    console.error("Gemini summarization failed:", err);
    return "Failed to generate summary.";
  }
}
